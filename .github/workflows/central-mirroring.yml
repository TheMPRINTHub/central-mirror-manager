name: Centralized Repository Mirroring
on:
  schedule:
    - cron: 0 * * * *
  workflow_dispatch: null
jobs:
  mirror_repositories:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Central Repo (for config file)
        uses: actions/checkout@v4
      - name: Debug PAT environment variable
        run: |
         echo "CENTRAL_ACCOUNT_PAT length: ${#CENTRAL_ACCOUNT_PAT}"
        env:
          CENTRAL_ACCOUNT_PAT: ${{ secrets.CENTRAL_ACCOUNT_PAT }}
      - name: Read Repository List
        id: read_repos
        run: |
          # Create temporary file for list
          TEMP_FILE=$(mktemp)
          
          # Read repositories line by line to avoid format issues
          while IFS= read -r repo || [ -n "$repo" ]; do
            # Skip empty lines and comments
            if [[ -n "$repo" && ! "$repo" =~ ^# ]]; then
              echo "Processing: $repo"
              echo "$repo" >> $TEMP_FILE
            fi
          done < repositories.txt
          
          # Set as multiline environment variable
          echo "REPO_LIST<<EOF" >> $GITHUB_ENV
          cat $TEMP_FILE >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Debug output
          echo "Repositories to be processed:"
          cat $TEMP_FILE
          
          # Clean up
          rm $TEMP_FILE
      - name: Set up Git
        run: >
          git config --global user.name "Central Mirror Bot"

          git config --global user.email "mirror-bot@example.com" # Use a relevant bot email
      - name: Mirror Each Repository
        id: mirror_loop
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CENTRAL_ACCOUNT_PAT }}  # Changed to use your PAT
          script: |
            const fs = require('fs');
            const { exec } = require('@actions/exec');
            
            const repoList = process.env.REPO_LIST.trim().split('\n');
            const centralAccount = context.repo.owner; 
            const centralAccountPat = process.env.CENTRAL_ACCOUNT_PAT;
      
            for (const sourceRepo of repoList) {
              const targetRepoName = sourceRepo.split('/')[1]; 
              const targetRepoFullName = `${centralAccount}/${targetRepoName}`;
              const targetRepoUrl = `https://${centralAccountPat}@github.com/${targetRepoFullName}.git`;
      
              console.log(`Mirroring ${sourceRepo} to ${targetRepoFullName}`);
      
              try {
                // Create target repo if it doesn't exist
                await github.rest.repos.get({ owner: centralAccount, repo: targetRepoName })
                  .catch(async (error) => {
                    if (error.status === 404) {
                      console.log(`Target repository ${targetRepoFullName} does not exist, creating...`);
                      try {
                        await github.rest.repos.createForAuthenticatedUser({
                          name: targetRepoName,
                          private: false,
                          auto_init: false
                        });
                      } catch (createError) {
                        console.error(`Error creating repository: ${createError}`);
                        throw createError;
                      }
                    } else {
                      throw error;
                    }
                  });
      
                // Mirror using shell commands instead of fs/exec
                const tempDir = `mirror-temp-${targetRepoName}`;
                await require('child_process').execSync(`mkdir -p ${tempDir}`);
                await require('child_process').execSync(`git clone --bare https://github.com/${sourceRepo}.git ${tempDir}`);
                await require('child_process').execSync(`cd ${tempDir} && git remote add target ${targetRepoUrl}`);
                await require('child_process').execSync(`cd ${tempDir} && git push --mirror target`);
                await require('child_process').execSync(`rm -rf ${tempDir}`);
      
                console.log(`Successfully mirrored ${sourceRepo} to ${targetRepoFullName}`);
              } catch (error) {
                console.error(`Error mirroring ${sourceRepo} to ${targetRepoFullName}:`, error);
              }
            }
            
            process.stdout.write('Mirroring process completed.\n');
    env:
      CENTRAL_ACCOUNT_PAT: ${{ secrets.CENTRAL_ACCOUNT_PAT }}
    permissions:
      contents: write
